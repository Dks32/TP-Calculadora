/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package gui;

/**
 *
 * @author alejandro
 */
public class Formulario extends javax.swing.JFrame {

    /**
     * Creates new form Formulario
     */
    public Formulario() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        panelPpal = new javax.swing.JPanel();
        EtiquetaA = new javax.swing.JLabel();
        InA = new javax.swing.JTextField();
        EtiquetaB = new javax.swing.JLabel();
        InB = new javax.swing.JTextField();
        EtiquetaC = new javax.swing.JLabel();
        InC = new javax.swing.JTextField();
        BotClear = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        BotMas = new javax.swing.JButton();
        BotMenos = new javax.swing.JButton();
        BotMul = new javax.swing.JButton();
        BotDiv = new javax.swing.JButton();
        EtiquetaE = new javax.swing.JLabel();
        BotV = new javax.swing.JButton();
        BotR = new javax.swing.JButton();
        BotI = new javax.swing.JButton();
        EtiquetaP = new javax.swing.JLabel();
        BotA = new javax.swing.JButton();
        BotB = new javax.swing.JButton();
        BotC = new javax.swing.JButton();
        BotConcat = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JSeparator();
        BotCerrar = new javax.swing.JButton();
        UnidadA = new javax.swing.JLabel();
        UnidadB = new javax.swing.JLabel();
        UnidadC = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("TP Calculadora");

        java.awt.GridBagLayout panelPpalLayout = new java.awt.GridBagLayout();
        panelPpalLayout.columnWidths = new int[] {96, 96, 96, 96};
        panelPpal.setLayout(panelPpalLayout);

        EtiquetaA.setText("Valor A:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panelPpal.add(EtiquetaA, gridBagConstraints);

        InA.setToolTipText("");
        InA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InAActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panelPpal.add(InA, gridBagConstraints);

        EtiquetaB.setText("Valor B:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panelPpal.add(EtiquetaB, gridBagConstraints);

        InB.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panelPpal.add(InB, gridBagConstraints);

        EtiquetaC.setText("Valor C:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panelPpal.add(EtiquetaC, gridBagConstraints);

        InC.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panelPpal.add(InC, gridBagConstraints);

        BotClear.setText("C");
        BotClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotClearActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panelPpal.add(BotClear, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(8, 2, 8, 2);
        panelPpal.add(jSeparator1, gridBagConstraints);

        BotMas.setText("+");
        BotMas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotMasActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panelPpal.add(BotMas, gridBagConstraints);

        BotMenos.setText("-");
        BotMenos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotMenosActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panelPpal.add(BotMenos, gridBagConstraints);

        BotMul.setText("*");
        BotMul.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotMulActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panelPpal.add(BotMul, gridBagConstraints);

        BotDiv.setText("/");
        BotDiv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotDivActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panelPpal.add(BotDiv, gridBagConstraints);

        EtiquetaE.setText("Electronica:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panelPpal.add(EtiquetaE, gridBagConstraints);

        BotV.setText("V");
        BotV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotVActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panelPpal.add(BotV, gridBagConstraints);

        BotR.setText("R");
        BotR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotRActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panelPpal.add(BotR, gridBagConstraints);

        BotI.setText("I");
        BotI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotIActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panelPpal.add(BotI, gridBagConstraints);

        EtiquetaP.setText("Pitagoras");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panelPpal.add(EtiquetaP, gridBagConstraints);

        BotA.setText("A");
        BotA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotAActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panelPpal.add(BotA, gridBagConstraints);

        BotB.setText("B");
        BotB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotBActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panelPpal.add(BotB, gridBagConstraints);

        BotC.setText("C");
        BotC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotCActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panelPpal.add(BotC, gridBagConstraints);

        BotConcat.setText("Concatenar");
        BotConcat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotConcatActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panelPpal.add(BotConcat, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(8, 2, 8, 2);
        panelPpal.add(jSeparator3, gridBagConstraints);

        BotCerrar.setText("Cerrar");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panelPpal.add(BotCerrar, gridBagConstraints);

        UnidadA.setText("a");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panelPpal.add(UnidadA, gridBagConstraints);

        UnidadB.setText("b");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panelPpal.add(UnidadB, gridBagConstraints);

        UnidadC.setText("c");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        panelPpal.add(UnidadC, gridBagConstraints);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelPpal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelPpal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void InAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InAActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_InAActionPerformed

    private void BotClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotClearActionPerformed
        // Limpiar campos
        InA.setText("");
        InB.setText("");
        InC.setText("");
        
        indicarUnidades("","","");
    }//GEN-LAST:event_BotClearActionPerformed

    private void BotMasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotMasActionPerformed
      // Sumar valores de campo A y B y mostrar el resultado en C
      String StrA, StrB;
      double ValA, ValB, ValC;

      StrA = InA.getText();
      StrB = InB.getText();

      // Verificar si A y B son Numéricos
      if(isNumeric(StrA) && isNumeric(StrB)){
        ValA = Double.parseDouble(StrA);
        ValB = Double.parseDouble(StrB);
        ValC = ValA + ValB;
        InC.setText(String.valueOf(ValC));
      } else {
        InC.setText("Error");
      }
      
      indicarUnidades("", "", "");
    }//GEN-LAST:event_BotMasActionPerformed

  private void BotMenosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotMenosActionPerformed
    /* Restar valores de campo A y B y mostrar el resultado en C */
    String StrA, StrB;
    double ValA, ValB, ValC;

    StrA = InA.getText();
    StrB = InB.getText();

    // Verificar si A y B son Numéricos
    if(isNumeric(StrA) && isNumeric(StrB)){
      ValA = Double.parseDouble(StrA);
      ValB = Double.parseDouble(StrB);
      ValC = ValA - ValB;
      InC.setText(String.valueOf(ValC));
    } else {
      InC.setText("Error");
    }
    
    indicarUnidades("", "", "");
  }//GEN-LAST:event_BotMenosActionPerformed

  private void BotMulActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotMulActionPerformed
    /* Multiplicar valores de campo A y B y mostrar el resultado en C */
    String StrA, StrB;
    double ValA, ValB, ValC;

    StrA = InA.getText();
    StrB = InB.getText();

    // Verificar si A y B son Numéricos
    if(isNumeric(StrA) && isNumeric(StrB)){
      ValA = Double.parseDouble(StrA);
      ValB = Double.parseDouble(StrB);
      ValC = ValA * ValB;
      InC.setText(String.valueOf(ValC));
    } else {
      InC.setText("Error");
    }
    
    indicarUnidades("", "", "");
  }//GEN-LAST:event_BotMulActionPerformed

  private void BotDivActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotDivActionPerformed
    /* Dividir valores de campo A y B y mostrar el resultado en C */
    String StrA, StrB;
    double ValA, ValB, ValC;

    StrA = InA.getText();
    StrB = InB.getText();

    // Verificar si A y B son Numéricos
    if(isNumeric(StrA) && isNumeric(StrB)){
      ValA = Double.parseDouble(StrA);
      ValB = Double.parseDouble(StrB);
      if(ValB > 0){
        ValC = ValA / ValB;
        InC.setText(String.valueOf(ValC));          
      } else {
        InC.setText("E: Division entre 0");
      }
    } else {
      InC.setText("Error");
    }
    
    indicarUnidades("", "", "");
  }//GEN-LAST:event_BotDivActionPerformed

  private void BotConcatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotConcatActionPerformed
    /* Concatenar A y B en C */
    InC.setText(InA.getText() + InB.getText());
    indicarUnidades("", "", "");
  }//GEN-LAST:event_BotConcatActionPerformed

  private void BotVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotVActionPerformed
    /*
     *  Calcular el valor de A (Voltaje) a partir de los valores de B (resistencia)
     *  y C (Corriente)
     */
    String StrB, StrC;
    double ValA, ValB, ValC;

    StrB = InB.getText();
    StrC = InC.getText();

    // Verificar si B y C son Numéricos
    if(isNumeric(StrB) && isNumeric(StrC)){
      ValB = Double.parseDouble(StrB);
      ValC = Double.parseDouble(StrC);
      ValA = ValB * ValC;
      InA.setText(String.valueOf(ValA));
    } else {
      InA.setText("Error");
    }
    
    indicarUnidades("Volts", "Ohms", "Ampers");
  }//GEN-LAST:event_BotVActionPerformed

  private void BotRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotRActionPerformed
    /*
     *  Calcular el valor de B (Resistencia) a partir de los valores de A (Voltaje)
     *  y C (Corriente)
     */
    String StrA, StrC;
    double ValA, ValB, ValC;

    StrA = InA.getText();
    StrC = InC.getText();

    // Verificar si A y C son Numéricos
    if(isNumeric(StrA) && isNumeric(StrC)){
      ValA = Double.parseDouble(StrA);
      ValC = Double.parseDouble(StrC);
      if(ValC>0){
        ValB = ValA / ValC;
        InB.setText(String.valueOf(ValB));
      } else {
        InB.setText("E: Division por 0");
      }
    } else {
      InB.setText("Error");
    }
    
    indicarUnidades("Volts", "Ohms", "Amperes");
  }//GEN-LAST:event_BotRActionPerformed

    private void BotIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotIActionPerformed
        /*
         *  Calcular el valor de C (Corriente) a partir de los valores de A (Voltaje)
         *  y B (Resistencia)
         */
        String StrA, StrB;
        double ValA, ValB, ValC;

        StrA = InA.getText();
        StrB = InB.getText();

        // Verificar si A y B son Numéricos
        if(isNumeric(StrA) && isNumeric(StrB)){
          ValA = Double.parseDouble(StrA);
          ValB = Double.parseDouble(StrB);
          if(ValB>0){
            ValC = ValA / ValB;
            InC.setText(String.valueOf(ValC));
          } else {
            InB.setText("E: Division por 0");
          }
        } else {
          InB.setText("Error");
        }

        indicarUnidades("Volts", "Ohms", "Amperes");
    }//GEN-LAST:event_BotIActionPerformed

    private void BotAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotAActionPerformed
        /* Calcular lado A de un Triangulo rectangulo */
        String StrB, StrC;
        double ValA, ValB, ValC;
        
        StrB = InB.getText();
        StrC = InC.getText();
        
        // verificar si B y C son numéricos
        if(isNumeric(StrB) && isNumeric(StrC)){
            ValB = Double.parseDouble(StrB);
            ValC = Double.parseDouble(StrC);
            ValA = Math.sqrt(-(ValB * ValB) + (ValC * ValC));
            
            InA.setText(String.valueOf(ValA));
        }
    }//GEN-LAST:event_BotAActionPerformed

    private void BotBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotBActionPerformed
        /* Calcular lado B de un Triangulo rectangulo */
        String StrA, StrC;
        double ValA, ValB, ValC;
        
        StrA = InA.getText();
        StrC = InC.getText();
        
        // verificar si A y C son numéricos
        if(isNumeric(StrA) && isNumeric(StrC)){
            ValA = Double.parseDouble(StrA);
            ValC = Double.parseDouble(StrC);
            ValB = Math.sqrt(-(ValA * ValA) + (ValC * ValC));
            
            InB.setText(String.valueOf(ValB));
        }
    }//GEN-LAST:event_BotBActionPerformed

    private void BotCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotCActionPerformed
        /* Calcular ipotenusa de un triangulo rectangulo */
        String StrA, StrB;
        double ValA, ValB, ValC;
        
        StrA = InA.getText();
        StrB = InB.getText();
        
        // verificar si A y B son numéricos
        if(isNumeric(StrA) && isNumeric(StrB)){
            ValA = Double.parseDouble(StrA);
            ValB = Double.parseDouble(StrB);
            ValC = Math.sqrt((ValA * ValA) + (ValB * ValB));
            
            InC.setText(String.valueOf(ValC));
        }
    }//GEN-LAST:event_BotCActionPerformed
    
  public static boolean isNumeric(String strNum) {
    if (strNum == null) {
      return false;
    }
    try {
      double d = Double.parseDouble(strNum);
    } catch (NumberFormatException nfe) {
      return false;
    }
    return true;
  }
  
  private void indicarUnidades(String UA, String UB, String UC){
    UnidadA.setText(UA);
    UnidadB.setText(UB);
    UnidadC.setText(UC);
  }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BotA;
    private javax.swing.JButton BotB;
    private javax.swing.JButton BotC;
    private javax.swing.JButton BotCerrar;
    private javax.swing.JButton BotClear;
    private javax.swing.JButton BotConcat;
    private javax.swing.JButton BotDiv;
    private javax.swing.JButton BotI;
    private javax.swing.JButton BotMas;
    private javax.swing.JButton BotMenos;
    private javax.swing.JButton BotMul;
    private javax.swing.JButton BotR;
    private javax.swing.JButton BotV;
    private javax.swing.JLabel EtiquetaA;
    private javax.swing.JLabel EtiquetaB;
    private javax.swing.JLabel EtiquetaC;
    private javax.swing.JLabel EtiquetaE;
    private javax.swing.JLabel EtiquetaP;
    private javax.swing.JTextField InA;
    private javax.swing.JTextField InB;
    private javax.swing.JTextField InC;
    private javax.swing.JLabel UnidadA;
    private javax.swing.JLabel UnidadB;
    private javax.swing.JLabel UnidadC;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JPanel panelPpal;
    // End of variables declaration//GEN-END:variables
}
